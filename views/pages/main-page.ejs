<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/stylesheets/global.css">
    <link rel="stylesheet" href="/stylesheets/main-page.css">
    <link rel="stylesheet" href="/stylesheets/transaction-new-form.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"> <!-- Just for person icon right user name -->

    <!-- Import AXIOS Library -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    
    <!-- Import ChartJS Library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Import my extra funtions library -->
    <script src="/javascripts/extra-functions.js"></script>

    <title>My Wallet</title>
</head>
<body mwa-page="dashboard">
    <section class="nav">
        <input type="checkbox" id="nav-check">
        
        <div class="nav-header">
            <div class="nav-title">
              <img src="/images/wallet.png" alt="" class="img-logo">
              <span class="app-title">MyWallet</span>
            </div>
        </div>

        <div class="nav-links">
            <!-- <a href="#" id="menuBtnAddTransaction">Adicionar transação</a> -->
            <a href="/app/transactions">Transações</a>
            <a href="/app/categories">Categorias</a>
            <a href="/app/wallets">Carteiras</a>
            <a href="#" class="menu-separator">Olá, <%= userFirstName %> <i class="user-icon material-icons">person</i></a>
            <a href="/app/logout" title="Log out"> <i class="user-icon material-icons">logout</i> </a>
        </div>

        <div class="nav-btn">
            <label for="nav-check">
              <span></span>
              <span></span>
              <span></span>
            </label>
        </div>

    </section>

    <section class="dashboard-content">
        <div class="charts-container">
            <div class="bar-chart-container">
                <canvas id="monthChart"></canvas>
            </div>
    
            <div class="doughnut-charts-container">
                <div class="doughnut-container">
                    <canvas id="gainsByCategoryChart"></canvas>
                </div>
    
                <div class="doughnut-container">
                    <canvas id="expensesByCategoryChart"></canvas>
                </div>
            </div>
        </div>
    </section>

    <!-- 'Add / Edit transaction' modal start-->
    <%#- include('../partials/transaction-new-form.html', {user: userId}); %>
    <!-- 'Add / Edit transaction' modal end-->
    
    <!-- Top notification bar start-->
    <%- include('../partials/top-notification-bar.html'); %>
    <!-- Top notification bar end-->

    <script>
        let today = new Date()
        let firstDay = new Date( today.getFullYear(), today.getMonth(), 1 )
        let lastDay = new Date( today.getFullYear(), today.getMonth() + 1, 0 )
        let btnGetReport = document.getElementById('btnGetReport')

        // buildChart()
        const ctx = document.getElementById( 'monthChart' )
        const ctx2 = document.getElementById( 'gainsByCategoryChart' )
        const ctx3 = document.getElementById( 'expensesByCategoryChart' )
        buildCharts()
        // buildEarningsAndExpensesChart()
        
        async function buildCharts() {

            try {

                let result = await axios.get(`/transactions/test/test?start=2022-08-19&end=2022-09-18&groupbytype=true`)
                let weeksList = result.data.gainsAndExpensesByWeek.weeksList
                let weeksCount = result.data.gainsAndExpensesByWeek.weeksCount
                let categoriesList = result.data.transactionsGroupedByCategory
                
                let weeksNamesArray = []
                let gainsArray = []
                let expensesArray = []

                let gainsCategories = categoriesList.C
                let gainsCategoriesNames = Object.keys( gainsCategories )
                let totalGainsByCategory = []

                let expensesCategories = categoriesList.D
                let expensesCategoriesNames = Object.keys( expensesCategories )
                let totalExpensesByCategory = []

                for ( let i = 1; i <= weeksCount; i++ ) {

                    weeksNamesArray.push( `Semana ${i}` )
                    gainsArray.push( weeksList[i].totalGains )
                    expensesArray.push( weeksList[i].totalExpenses )
                    // console.log( result.data.gainsAndExpensesByWeek.weeksList[i].firstDay )

                }

                for ( let i = 0; i < gainsCategoriesNames.length; i++ ) {
                    let totalGains = 0

                    gainsCategories[ gainsCategoriesNames[ i ] ].transactions.forEach( transaction => {
                        totalGains += transaction.value
                    });

                    totalGainsByCategory.push( totalGains )
                }

                for ( let i = 0; i < expensesCategoriesNames.length; i++ ) {
                    let totalExpenses = 0

                    expensesCategories[ expensesCategoriesNames[ i ] ].transactions.forEach( transaction => {
                        totalExpenses += transaction.value
                    });

                    totalExpensesByCategory.push( totalExpenses )
                }

                buildEarningsAndExpensesChart( weeksNamesArray, gainsArray, expensesArray )
                buildgainsByCategoryChart( ctx2, gainsCategoriesNames, totalGainsByCategory, 'Ganhos no período' )
                buildgainsByCategoryChart( ctx3, expensesCategoriesNames, totalExpensesByCategory, 'Despesas no período' )
                
                // console.log( totalGainsByCategory )
                // console.log( totalExpensesByCategory )
                // console.log( result.data )

            }
            catch (e) {

                throw `Erro >>> ${ e }`

            }

        }

        async function buildEarningsAndExpensesChart( weeksNames, gainsArray, expensesArray ) {

            //let transactions = await getTransactionsData()
            //let EarningsAndExpenses = await getEarningsAndExpenses( transactions )

            const myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: weeksNames,
                    datasets: [{
                        label: 'Ganhos',
                        data: gainsArray,
                        backgroundColor: [
                            'rgba(0, 0, 255, 0.2)',
                            'rgba(0, 0, 255, 0.2)',
                            'rgba(0, 0, 255, 0.2)',
                            'rgba(0, 0, 255, 0.2)'
                        ],
                        borderColor: [
                            'rgba(0, 0, 255, 1)',
                            'rgba(0, 0, 255, 1)',
                            'rgba(0, 0, 255, 1)',
                            'rgba(0, 0, 255, 1)'
                        ],
                        borderWidth: 1
                    }, {
                        label: 'Gastos',
                        data: expensesArray,
                        backgroundColor: [
                            'rgba(255, 0, 0, 0.2)',
                            'rgba(255, 0, 0, 0.2)',
                            'rgba(255, 0, 0, 0.2)',
                            'rgba(255, 0, 0, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 0, 0, 1)',
                            'rgba(255, 0, 0, 1)',
                            'rgba(255, 0, 0, 1)',
                            'rgba(255, 0, 0, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Relatório de Ganhos x Gastos'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            })
        
            // myChart.height = 200;

        }

        
        async function buildgainsByCategoryChart( canvasElement, categoriesNamesArray, valuesArray, chartTitle ) {

            const myChart = new Chart( canvasElement, {
                type: 'doughnut',
                data: {
                    labels: categoriesNamesArray,
                    datasets: [{
                        label: 'Total',
                        data: valuesArray,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 2500
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: chartTitle
                        },
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                display: false
                            }
                        }]
                    }
                }
            })

            console.log( myChart )
            
        }

        let testDate = today.getFullYear()

        document.getElementById( 'dateToday' ).innerText = today
        document.getElementById( 'dateFirstDay' ).innerText = firstDay
        document.getElementById( 'dateLastDay' ).innerText = lastDay
        // document.getElementById( 'test' ).innerText = testDate
    </script>
</body>
</html>